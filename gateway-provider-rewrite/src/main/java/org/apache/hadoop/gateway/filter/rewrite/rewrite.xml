<rules>
    <matchDef/>
    <checkdef/>
    <actionDef/>
    <funcDef/>
    <!-- Specialization of match, operation="match", type="template" -->
    <!-- When flow="and" = Will do each until one succeeds. -->
    <!-- When flow="or" do them each as long as they succeed. -->
    <!-- When flow="all" = Do them all. -->
    <rule name="HDFS" url="..." dir="in,out" flow="and">
        <match/>
        <check/>
        <action type="rewrite" param="template"/>
        <action type="fail" param="404"/>
        <control flow="and">
            <match/>
            <check/>
            <action/>
        </control>
        <control flow="or">
            <match/>
            <check/>
            <action/>
            <stop/>
        </control>
        <match flow="all|and|or"> <!-- Match can nested steps to be done iff match succeeds. -->
            <match/>
            <check/>
            <action/>
        </match>
        <check flow="all|and|or"> <!-- Check can nested steps to be done iff check succeeds. -->
            <match/>
            <check/>
            <action/>
        </check>
    </rule>
</rules>

<rulesets>
    <ruledef name=""/>
    <ruleset match="" source="URL,PARAM,COOKIE,HEADER,BODY" direction="inbound,outbound" do="rule-name"/>
    <ruleset name="">
        <rule name=""></rule>
        <rewrite></rewrite> <!-- Decrypt query -->
        <rewrite></rewrite> <!-- Rewrite URL -->
        <rule class="" if="" then="" else="" next=""/>
    </ruleset>
</rulesets>

<!-- One file per cluster -->
<rewrite>

    <!-- For hostname mapping, etc. -->
    <!-- QUESTION: How are these used in the rules? -->
    <properties>
        <property name="internal-host-name" value="external-host-name"/> <!-- Bidirectional? -->
    </properties>

    <!-- Must have an interface contract like: -->
    <!-- String invoke( String[] args ) -->
    <!-- String invoke( String... args ) -->
    <!-- QUESTION: How are these used in the rules? -->
    <!-- QUESTION: Must be public static? -->
    <functions>
        <function name="some-name" class="" method=""/>
    </functions>

    <!-- Must have an interface contract like: -->
    <!-- Reader createFilter( Reader reader, UrlRewriter rewriter ) -->
    <filters>
        <filter name="some-name" type="text/html" class=""/>
    </filters>

    <ruleset name="NAMENODE.request">
        <rule>
            <match></match>
            <return></return>
        </rule>
        <rule>
            <match></match>
            <return></return>
        </rule>
        <rule>
            <match></match>
            <condition></condition>
            <set/>
            <call/>
            <return></return>
        </rule>
        <rule>
            <match></match>
            <set/>
            <run/>
            <if>
                <condition></condition>
                <set/>
                <run/>
                <return></return>
            </if>
            <if>
                <equals/>
                <set/>
                <call/>
                <return/>
            </if>
            <return></return>
        </rule>
    </ruleset>

</rewrite>